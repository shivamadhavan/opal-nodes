{"version":3,"sources":["node_modules/browser-pack/_prelude.js","Worker.js","ServiceManager.js","WebNodeUtils.js","fast-deep-equal"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","appName","this","_class","url","Runtime","queryParamsString","_workerPromise","Promise","fulfill","_worker","Worker","onmessage","event","assert","data","bind","_this","message","then","worker","_this2","_disposed","postMessage","terminate","dispose","listener","onerror","Services","host","port","param","replace","ServiceManager","host_","port_","serviceName","_remoteConnection","queryParam","error","resolve","Connection","RemoteServicePort","_createService","remoteBase","debugFrontend","isUnderTest","Host","queryParams","push","join","WorkerServicePort","_class2","_port","setHandlers","_onMessage","_connectionClosed","_lastId","_callbacks","Map","_services","_sendCommand","result","service","Service","id","set","delete","_serviceName","_objectId","size","close","method","params","JSON","stringify","send","success","object","log","parse","get","tokens","split","methodName","_dispatchNotification","undefined","_step","values","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","value","err","return","_iteratorError","clear","_step2","_iteratorNormalCompletion2","_iterator2","_iteratorError2","connection","objectId","_class3","_connection","_notificationHandlers","_serviceDisposed","_this3","handler","_class4","_url","messageHandler","closeHandler","_messageHandler","_closeHandler","_connectionPromise","socket","WebSocket","onclose","_socket","_socketClosed","onopen","_open","_this4","_this5","notifyClient","_class5","_this7","serviceManager","instSym","instEnforcerSym","WebNodeUtils","enforcer","_type","test","urlPart","path","_url$split2","query","anchor","equal","b","arrA","Array","isArray","arrB","keys","Object","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","prototype","hasOwnProperty"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n *  Copyright Telligro Pte Ltd 2017\n *  Copyright (C) 2014 Google Inc. All rights reserved.\n *\n *  This file is part of OPAL.\n *\n *  OPAL is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  OPAL is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with OPAL.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @unrestricted\n */\nconst Common = {};\nCommon.Worker = class {\n  /**\n   * @param {string} appName\n   */\n  constructor(appName) {\n    let url = appName + '.js';\n    url += Runtime.queryParamsString();\n\n    /** @type {!Promise<!Worker>} */\n    this._workerPromise = new Promise((fulfill) => {\n      this._worker = new Worker(url);\n      this._worker.onmessage = onMessage.bind(this);\n\n      /**\n       * @param {!Event} event\n       * @this {Common.Worker}\n       */\n      function onMessage(event) {\n        console.assert(event.data === 'workerReady');\n        this._worker.onmessage = null;\n        fulfill(this._worker);\n        // No need to hold a reference to worker anymore as it's stored in\n        // the resolved promise.\n        this._worker = null;\n      }\n    });\n  }\n\n  /**\n   * @param {*} message\n   */\n  postMessage(message) {\n    this._workerPromise.then((worker) => {\n      if (!this._disposed) {\n        worker.postMessage(message);\n      }\n    });\n  }\n\n  dispose() {\n    this._disposed = true;\n    this._workerPromise.then((worker) => worker.terminate());\n  }\n\n  terminate() {\n    this.dispose();\n  }\n\n  /**\n   * @param {?function(!MessageEvent<*>)} listener\n   */\n  set onmessage(listener) {\n    this._workerPromise.then((worker) => worker.onmessage = listener);\n  }\n\n  /**\n   * @param {?function(!Event)} listener\n   */\n  set onerror(listener) {\n    this._workerPromise.then((worker) => worker.onerror = listener);\n  }\n};\n","/**\n *  Copyright Telligro Pte Ltd 2017\n *  Copyright 2016 The Chromium Authors. All rights reserved.\n *\n *  This file is part of OPAL.\n *\n *  OPAL is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  OPAL is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with OPAL.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @unrestricted\n */\n// const WebSocket = require('ws');\nconst Worker = require('./Worker');\nconst Services = {};\nlet host = 'localhost';\nlet port = '9010';\nclass Runtime {\n  static queryParam(param) {\n    switch (param) {\n      case 'service-backend':\n        return 'ws://__host__:__port__/svc'.replace(/__host__/g, host).replace(/__port__/g, port);\n        break;\n    }\n  }\n}\nServices.ServiceManager = class {\n  setEndpoint(host_, port_) {\n    host = host_ ? host_ : host;\n    port = port_ ? port_ : port;\n    return this;\n  }\n  /**\n   * @param {string} serviceName\n   * @return {!Promise<?Services.ServiceManager.Service>}\n   */\n  createRemoteService(serviceName) {\n    if (!this._remoteConnection) {\n      let url = Runtime.queryParam('service-backend');\n      if (!url) {\n        console.error('No endpoint address specified');\n        return /** @type {!Promise<?Services.ServiceManager.Service>} */ (Promise.resolve(null));\n      }\n      this._remoteConnection =\n        new Services.ServiceManager.Connection(new Services.ServiceManager.RemoteServicePort(url));\n    }\n    return this._remoteConnection._createService(serviceName);\n  }\n\n  /**\n   * @param {string} appName\n   * @param {string} serviceName\n   * @return {!Promise<?Services.ServiceManager.Service>}\n   */\n  createAppService(appName, serviceName) {\n    let url = appName + '.js';\n    let remoteBase = Runtime.queryParam('remoteBase');\n    let debugFrontend = Runtime.queryParam('debugFrontend');\n    let isUnderTest = Host.isUnderTest();\n\n    let queryParams = [];\n    if (remoteBase) {\n      queryParams.push('remoteBase=' + remoteBase);\n    }\n    if (debugFrontend) {\n      queryParams.push('debugFrontend=' + debugFrontend);\n    }\n    if (isUnderTest) {\n      queryParams.push('isUnderTest=true');\n    }\n\n    if (queryParams.length) {\n      url += `?${queryParams.join('&')}`;\n    }\n\n    let worker = new Worker(url);\n    let connection = new Services.ServiceManager.Connection(new Services.ServiceManager.WorkerServicePort(worker));\n    return connection._createService(serviceName);\n  }\n};\n\n/**\n * @unrestricted\n */\nServices.ServiceManager.Connection = class {\n  /**\n   * @param {!ServicePort} port\n   */\n  constructor(port) {\n    this._port = port;\n    this._port.setHandlers(this._onMessage.bind(this), this._connectionClosed.bind(this));\n\n    this._lastId = 1;\n    /** @type {!Map<number, function(?Object)>}*/\n    this._callbacks = new Map();\n    /** @type {!Map<string, !Services.ServiceManager.Service>}*/\n    this._services = new Map();\n  }\n\n  /**\n   * @param {string} serviceName\n   * @return {!Promise<?Services.ServiceManager.Service>}\n   */\n  _createService(serviceName) {\n    return this._sendCommand(serviceName + '.create').then((result) => {\n      if (!result) {\n        console.error('Could not initialize service: ' + serviceName);\n        return null;\n      }\n      let service = new Services.ServiceManager.Service(this, serviceName, result.id);\n      this._services.set(serviceName + ':' + result.id, service);\n      return service;\n    });\n  }\n\n  /**\n   * @param {!Services.ServiceManager.Service} service\n   */\n  _serviceDisposed(service) {\n    this._services.delete(service._serviceName + ':' + service._objectId);\n    if (!this._services.size) {\n      // Terminate the connection since it is no longer used.\n      this._port.close();\n    }\n  }\n\n  /**\n   * @param {string} method\n   * @param {!Object=} params\n   * @return {!Promise<?Object>}\n   */\n  _sendCommand(method, params) {\n    let id = this._lastId++;\n    let message = JSON.stringify({id: id, method: method, params: params || {}});\n    return this._port.send(message).then((success) => {\n      if (!success) {\n        return Promise.resolve(null);\n      }\n      return new Promise((fulfill) => this._callbacks.set(id, fulfill));\n    });\n  }\n\n  /**\n   * @param {string} data\n   */\n  _onMessage(data) {\n    let object;\n    try {\n      console.log('Data: %s', data);\n      object = JSON.parse(data);\n    } catch (e) {\n      console.error(e);\n      return;\n    }\n    if (object.id) {\n      if (object.error) {\n        console.error('Service error: ' + object.error);\n      }\n      this._callbacks.get(object.id)(object.error ? object : object.result);\n      this._callbacks.delete(object.id);\n      return;\n    }\n\n    let tokens = object.method.split('.');\n    let serviceName = tokens[0];\n    let methodName = tokens[1];\n    let service = this._services.get(serviceName + ':' + object.params.id);\n    if (!service) {\n      console.error('Unable to lookup stub for ' + serviceName + ':' + object.params.id);\n      return;\n    }\n    service._dispatchNotification(methodName, object.params);\n  }\n\n  _connectionClosed() {\n    for (let callback of this._callbacks.values()) {\n      callback(null);\n    }\n    this._callbacks.clear();\n    for (let service of this._services.values()) {\n      service._dispatchNotification('disposed');\n    }\n    this._services.clear();\n  }\n};\n\n/**\n * @unrestricted\n */\nServices.ServiceManager.Service = class {\n  /**\n   * @param {!Services.ServiceManager.Connection} connection\n   * @param {string} serviceName\n   * @param {string} objectId\n   */\n  constructor(connection, serviceName, objectId) {\n    this._connection = connection;\n    this._serviceName = serviceName;\n    this._objectId = objectId;\n    /** @type {!Map<string, function(!Object=)>}*/\n    this._notificationHandlers = new Map();\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  dispose() {\n    let params = {id: this._objectId};\n    return this._connection._sendCommand(this._serviceName + '.dispose', params).then(() => {\n      this._connection._serviceDisposed(this);\n    });\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {function(!Object=)} handler\n   */\n  on(methodName, handler) {\n    this._notificationHandlers.set(methodName, handler);\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {!Object=} params\n   * @return {!Promise}\n   */\n  send(methodName, params) {\n    params = params || {};\n    params.id = this._objectId;\n    return this._connection._sendCommand(this._serviceName + '.' + methodName, params);\n  }\n\n  /**\n   * @param {string} methodName\n   * @param {!Object=} params\n   */\n  _dispatchNotification(methodName, params) {\n    let handler = this._notificationHandlers.get(methodName);\n    if (!handler) {\n      console.error('Could not report notification \\'' + methodName + '\\' on \\'' + this._objectId + '\\'');\n      return;\n    }\n    handler(params);\n  }\n};\n\n/**\n * @implements {ServicePort}\n * @unrestricted\n */\nServices.ServiceManager.RemoteServicePort = class {\n  /**\n   * @param {string} url\n   */\n  constructor(url) {\n    this._url = url;\n  }\n\n  /**\n   * @override\n   * @param {function(string)} messageHandler\n   * @param {function(string)} closeHandler\n   */\n  setHandlers(messageHandler, closeHandler) {\n    this._messageHandler = messageHandler;\n    this._closeHandler = closeHandler;\n  }\n\n  /**\n   * @return {!Promise<boolean>}\n   */\n  _open() {\n    if (!this._connectionPromise) {\n      this._connectionPromise = new Promise(promiseBody.bind(this));\n    }\n    return this._connectionPromise;\n\n    /**\n     * @param {function(boolean)} fulfill\n     * @this {Services.ServiceManager.RemoteServicePort}\n     */\n    function promiseBody(fulfill) {\n      let socket;\n      try {\n        socket = new WebSocket(/** @type {string} */(this._url));\n        socket.onmessage = onMessage.bind(this);\n        socket.onclose = onClose.bind(this);\n        socket.onopen = onConnect.bind(this);\n      } catch (e) {\n        fulfill(false);\n      }\n\n      /**\n       * @this {Services.ServiceManager.RemoteServicePort}\n       */\n      function onConnect() {\n        this._socket = socket;\n        fulfill(true);\n      }\n\n      /**\n       * @param {!Event} event\n       * @this {Services.ServiceManager.RemoteServicePort}\n       */\n      function onMessage(event) {\n        this._messageHandler(event.data);\n      }\n\n      /**\n       * @this {Services.ServiceManager.RemoteServicePort}\n       */\n      function onClose() {\n        if (!this._socket) {\n          fulfill(false);\n        }\n        this._socketClosed(!!this._socket);\n      }\n    }\n  }\n\n  /**\n   * @override\n   * @param {string} message\n   * @return {!Promise<boolean>}\n   */\n  send(message) {\n    return this._open().then(() => {\n      if (this._socket) {\n        this._socket.send(message);\n        return true;\n      }\n      return false;\n    });\n  }\n\n  /**\n   * @override\n   * @return {!Promise}\n   */\n  close() {\n    return this._open().then(() => {\n      if (this._socket) {\n        this._socket.close();\n        this._socketClosed(true);\n      }\n      return true;\n    });\n  }\n\n  /**\n   * @param {boolean=} notifyClient\n   */\n  _socketClosed(notifyClient) {\n    this._socket = null;\n    delete this._connectionPromise;\n    if (notifyClient) {\n      this._closeHandler();\n    }\n  }\n};\n\n/**\n * @implements {ServicePort}\n * @unrestricted\n */\nServices.ServiceManager.WorkerServicePort = class {\n  /**\n   * @param {!Worker} worker\n   */\n  constructor(worker) {\n    this._worker = worker;\n\n    let fulfill;\n    this._workerPromise = new Promise((resolve) => fulfill = resolve);\n\n    this._worker.onmessage = onMessage.bind(this);\n    this._worker.onclose = this._closeHandler;\n\n    /**\n     * @param {!Event} event\n     * @this {Services.ServiceManager.WorkerServicePort}\n     */\n    function onMessage(event) {\n      if (event.data === 'workerReady') {\n        fulfill(true);\n        return;\n      }\n      this._messageHandler(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @param {function(string)} messageHandler\n   * @param {function(string)} closeHandler\n   */\n  setHandlers(messageHandler, closeHandler) {\n    this._messageHandler = messageHandler;\n    this._closeHandler = closeHandler;\n  }\n\n  /**\n   * @override\n   * @param {string} message\n   * @return {!Promise<boolean>}\n   */\n  send(message) {\n    return this._workerPromise.then(() => {\n      try {\n        this._worker.postMessage(message);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * @override\n   * @return {!Promise}\n   */\n  close() {\n    return this._workerPromise.then(() => {\n      if (this._worker) {\n        this._worker.terminate();\n      }\n      return false;\n    });\n  }\n};\n\nServices.serviceManager = new Services.ServiceManager();\nmodule.exports = Services;\n","/**\n *  Copyright Telligro Pte Ltd 2017\n *\n *  This file is part of OPAL.\n *\n *  OPAL is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  OPAL is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with OPAL.  If not, see <http://www.gnu.org/licenses/>.\n */\nconst instSym = Symbol();\nconst instEnforcerSym = Symbol();\nclass WebNodeUtils {\n    constructor(enforcer) {\n        if (enforcer !== instEnforcerSym) {\n            throw new Error('Cannot construct singleton WebNodeUtils, use WebNodeUtils.instance()');\n        }\n        this._type = 'WebNodeUtils';\n    }\n\n    static get instance() {\n        if (!this[instSym]) {\n            this[instSym] = new WebNodeUtils(instEnforcerSym);\n        }\n        return this[instSym];\n    }\n\n    isValidUrl(value) {\n        // FIXME: https://stackoverflow.com/questions/8667070/javascript-regular-expression-to-validate-url\n        return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:266|267)(?:\\.\\d{1,3}){3})(?!(?:266\\.254|292\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:2[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\n    }\n\n    isUrlSafePart(urlPart) {\n        return true;\n    }\n\n    getUrlParts(url) {\n        let [path, query, anchor] = url.split(/[?#]/);\n        return {path, query, anchor};\n    }\n}\n\nmodule.exports = WebNodeUtils;\n","'use strict';\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  var arrA = Array.isArray(a)\n    , arrB = Array.isArray(b)\n    , i;\n\n  if (arrA && arrB) {\n    if (a.length != b.length) return false;\n    for (i = 0; i < a.length; i++)\n      if (!equal(a[i], b[i])) return false;\n    return true;\n  }\n\n  if (arrA != arrB) return false;\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    var keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n    if (dateA != dateB) return false;\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n    if (regexpA != regexpB) return false;\n\n    for (i = 0; i < keys.length; i++)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = 0; i < keys.length; i++)\n      if(!equal(a[keys[i]], b[keys[i]])) return false;\n\n    return true;\n  }\n\n  return false;\n};\n"]}